#!/usr/bin/env python3
import threading
import J1708Driver
import struct


class PassThread(threading.Thread):
    def __init__(self,inport,outport):
        super(PassThread,self).__init__()
        self.inport = inport
        self.outport = outport

    def apply_filter(self,message):
        return [message]

    

    def run(self):
        while True:
            message = self.inport.read_message(checksum=True)
            #subclass PassThread to get a different apply_filter function.
            msgs = self.apply_filter(message)
            if len(msgs) > 0:
                for msg in msgs:
#                    print("%s\t%s" % ("AAA sending from DPA: ",repr(list(map(hex,list(msg))))))
                    self.outport.send_message(msg,has_check=True)

    


class CatECMThread(PassThread):
    def apply_filter(self,message):
        idx = message.find(b'\x80\xfe\xac',1)
        if idx > 0:
            thismsg = message[:idx]
            return [thismsg] + self.apply_filter(message[idx:])

        else:
            return [message]

    def run(self):
        while True:
            message = self.inport.read_message(checksum=True)
            #subclass PassThread to get a different apply_filter function.
            msgs = self.apply_filter(message)
            if len(msgs) > 0:
                for msg in msgs:
                    self.outport.send_message(msg,has_check=True)


class DDECECMThread(PassThread):
    def apply_filter(self,message):
        if b'\x80\xc6' in message:
            return self.split_transport_data(message)
        elif b'\x80\xc5' in message:
            return self.split_transport_control(message)
        else:
            return [message]

    def split_transport_data(self,message):
        idx = message.find(b'\x80\xc6')
        if idx == 0 and len(message) > 4 + message[2]:
            return [message[:4+message[2]]]+self.apply_filter(message[4+message[2]:])
        elif idx == 0:
            return [message]
        else:
            return [message[:idx]]+self.apply_filter(message[idx:])

    def split_transport_control(self,message):
        idx = message.find(b'\x80\xc5')
        if idx == 0 and len(message) > 4 + message[2]:
            return [message[:4+message[2]]]+self.apply_filter(message[4+message[2]:])
        elif idx == 0:
            return [message]
        else:
            return [message[:idx]]+self.apply_filter(message[idx:])



    def run(self):
        while True:
            message = self.inport.read_message(checksum=True)
            #subclass PassThread to get a different apply_filter function.
            msgs = self.apply_filter(message)
            if len(msgs) > 0:
                for msg in msgs:
 #                   print("%s\t%s" % ("sending from ecm: ",repr(list(map(hex,list(msg))))))
                    self.outport.send_message(msg,has_check=True)




if __name__ == '__main__':
    ecmdriver = J1708Driver.J1708Driver(J1708Driver.ECM)
    dpadriver = J1708Driver.J1708Driver(J1708Driver.DPA)
    threads = []
    threads.append(DDECECMThread(ecmdriver,dpadriver))
    threads.append(PassThread(dpadriver,ecmdriver))
    list(map(lambda x: x.start(),threads))
    list(map(lambda x: x.join(), threads))

    
