#!/usr/bin/env python3.5
import threading
import J1708Driver
import struct


dpa_mid = None
ecm_mid = None

class PassThread(threading.Thread):
    def __init__(self,inport,outport,name,filelock):#name is either "ECM" or "DPA"
        super(PassThread,self).__init__()
        self.inport = inport
        self.outport = outport
        self.name = name
        self.filelock = filelock
    def apply_filter(self,message):
        return [message]

    

    def run(self):
        fh = open("/var/diagnostics/toBeProcessed/forwarding.log","w+")
        fh.write("Begin J1708 Forwarding\n")
        while True:
            msgs = self.inport.read_message(checksum=True)
            #subclass PassThread to get a different apply_filter function.


            if len(msgs) > 0:
                for msg in msgs:
                    with self.filelock:
                        fh.write("%s\t%s\n" % (self.name,repr(list(map(hex,list(msg))))))
                        self.outport.send_message(msg,has_check=True)

    



if __name__ == '__main__':
    ecmdriver = J1708Driver.J1708Driver(J1708Driver.ECM)
    dpadriver = J1708Driver.J1708Driver(J1708Driver.DPA)
    writelock = threading.Lock()
    threads = []
    threads.append(PassThread(ecmdriver,dpadriver,"ECM",writelock))
    threads.append(PassThread(dpadriver,ecmdriver,"DPA",writelock))
    list(map(lambda x: x.start(),threads))
    list(map(lambda x: x.join(), threads))

    
